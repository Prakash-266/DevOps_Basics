
⚙️ Example Workflow in DevOps
    1.Developer writes code and pushes to Git repository (e.g., GitHub).
    2.CI pipeline runs automated tests (e.g., via Jenkins or GitLab CI).
    3.If tests pass, the code is automatically deployed to a staging or production server (CD).
    4.Monitoring tools like Datadog or Prometheus track performance.
    5.Issues are logged and fed back into development.

CLOUD TRAIL --> is a web service that records API activity in your AWS account								
CLOUD WATCH -->is a monitoring service for AWS resources and application 

GIT --> open-source version control system that enables you to store code & SCM
        branching feature 
             a bit knowledge on cmds.
		yum install git -y 
		check version			-- git --version {workiing area installed } or git -v
                index or staging & local repo	-- git init .
		mv f1 woking to satging		-- git add   
		used to unstage a file		--git revert –staged file .
		restore your changes later	-- git stash
		Restore a specific stash in list--git stash apply stash@{1}
		display file status 		-- git status
		mv f1 index to local repo	-- git commit -m "version1"
		show files in local repo 	-- git log or git log --oneline
		see data in 1 file 		--git show < commit id >	
create a user cmds 
		creating user 			--git config --global user.name "jaya"
		git config email		--global user.email "jp@17gmail.com"
		git config name 		--global user.name "jaya_prakash"
		check the user 		 	-- git config --list
  ABOUT BRANCHES 
 		Creating branching   	 	--git branch -m "main"	
		Login into branch		--git checkout branchname	
 		Create & login 			--git checkout -b "main"
  connection b/w git - gtuhub 			
		LINK GIT -GITHUB CMD		--git remote add origin < github repo URL >
                Verify        			--git remote --v
   PUSH CMD 
		push to github 			--git push -u origin <branch name>
GITHUB -->GitHub is a web-based platform and aslo a hosting service for Git repositories used for version control and collaboration on software projects.
             known topic - create the repo 
			   checking the versioning
			   creating tokens
			    
MAVEN --> One of the devops tool which is used to creat the build files 
		it is used to deploy easy and file size also light in size
	
		yum install java
		wget <maven  file ot download>
		tar xvzf <maven file> -C /opt  (extract)
		TO SET PATH		
		export M2_HOME=/OPT/<MAVEN FILE> #This sets an environment variable called M2_HOME to point to your Maven installation directory..
		export PATH=$PATH:$M2_HOME/bin/bash
		mvn archetype:generate
		cd <arifcat name> then excuate thhis 3 cmds
                 1 -- mvn compile #it will convert human language to machine language 
		 2 -- mvn test
		 3 -- mvn package
		AFTER mvn install 
                 then you can see the location of the files 

DOCKER  -->  It is a tool which is used to create the light weight containers and  containerization is the process which is used to  create ,deploy and run the application 
		installation                   -- yum install docker -y 
		check version                 -- docker --version           
                creating image                -- docker run -it jpimg /bin/bash
		creating container with name  -- docker run -it --name jpc1 jpimg /bin/bash
	 	status,name,port,cid          -- docker ps -a
		display images                -- docker images
		start container               -- docker start jpc1
		into container                -- docker attach jpc1 or docker exec --it <container_name> /bin/bash
		Rename container              -- docker rename cid newc4 
		container to img creation     -- docker commit  jpc1 Njpimg2
		d.file to img creation        -- docker build -t Njpimg3 . -f Docker_file
		create network		      --docker network create my_network
		list all docker n/w	      -- docker network ls
		view details of n/w 	      --docker network_name inspect
		connect exixting container    --docker network connect n_name container_name
		disconnect n/w with container -- docker network diconnect n_name container_name
		connect running container     --docker run --network n_name img_name
		create volume		      --docker volume create my_voume
		remove stoped container	      --docker container prune		
		mapping                       -- docker run -it --privileged --volumes-from jpimg newc3 /bin/bash

       DOCKER_FILE -->A Dockerfile is a script containing instructions on how to build a Docker image. 
         
         BASIC_STRUCTURE OF DOCKER_FILE STRUCTURE-

             	FROM 	: This specifies the base image to build
		WORKDIR : This specifies the 'working directory' path in image where files will be copied and commands will be executed.
		COPY 	: This instruction specifies to copy files from the host and put them into the container image
		RUN 	: This instruction tells the builder to run a specific command
		ENV 	: This instruction sets environment variable that a running container will use
		Expose 	: This specifies to expose the image to a specific port number

	     EXAMPLE-	FROM Python3.5.0
			WORKDIR /app
			CP . /app
			RUN useradd my-user USER my-user ~docker build -t my-image ~docker run -it --name ubuntu-1 my-image bash
			Expose 5000
			CMD ["python3", "app.py"]

JENKINS SETUP --> Jenkins is an open-source automation server used to automate parts of the software development process, especially building, testing, and deploying code.
		1.install java 			--yum install java17 -y #if u want specific java version --yum whatprovides java
		2.download jenkins from web	--sudo weget -0 url
		3.download dependences		--sudo rpm url
		4.upgrade and install      	--yum upgrade & yum install jenkins -y
		5.enable and restart 		--systemctl enable jenkins & systemctl start jenkins & for status use systemctl jenkins status 
		6.set port number as 8080 in the aws or use command line like --java -jar jenkins.war --httpPort=9090
		7.copy the ip and add :8080 like ---192.32.22:8080 and paste in web browser 
		8.open jenkins and ask use name and password and its show the path for password so from that path we can get password for jenkins 

	GITHUB-JENKINS PLUGIN SETUP STEPS 
	1.After giving password its shows two options.click on  'Install suggested plugins' its takes to install so have to wait sometime
	2.and ask username details fill it up and nxt its shows jenkins url if u want copy it and click on save and finish then jenkis ready to use 
	3.then install github plugin to make a connection b/w githubb and jenkins
	4.For that go to MANAGE JENKINS and search as GIT PLUGIN and click INSTALL WITHOUT RESTART 
	5.Go to github and create token for that go to profile>settings>development settings>personal_tocken>tocken(classic)>create token and finish settings and copy & save that token
	6.go to jenkins and click on NEW ITEM and fill decribtion select FREESTYLE PROJECT then PICK GIT option 
	7.Here we have to paste the github url and token and name and click save and add branch 
	8.comes to home page and click on BUILD_NOW to execute the build-test-delopy process
	9.to see the output go to console output and you can check WORKSPACE in jenkins-cli path is(/var/lib/jenkins/workspace/)

	
	DIFFERENCE OF GITHUB AND GITHUB_WEBHOOK PLUGIN
	
	Feature		Jenkins GitHub Plugin		GitHub Webhook to Jenkins
	-------------------------------------------------------------------------
	Trigger Type	Polling				Push/event-based (webhook)
	Speed		Slower (scheduled checks)	Faster (real-time)
	Efficiency	Less efficient			More efficient
	Setup Location	Jenkins	GitHub 			repository settings
	Use Cases	General GitHub integration	Auto-trigger builds on changes

	For real-time builds: Use GitHub Webhooks.
 		-->WEBHOOK --GitHub sends an HTTP POST to Jenkins (at a URL like http://your-jenkins.com/github-webhook/).
 				"" Jenkins -> Manage Jenkins -> Manage Plugins -> Install github integration plugin ""

		 -->GITHUB  --You need to enable "Poll SCM" and set a schedule like * * * * * to check every minute.even if there is nothing updates.

TOMCAT_SETUP --> which is an open-source web server and servlet container. It's used to deploy and run Java web applications.
		main folders and files we have to know (apache-tomcat-9.0.87,conf--tomcat.users.xml,bin--startup.sh,webapps--META-INF--context.xml)
		
			├── bin/          # Startup and shutdown scripts
			├── conf/         # Configuration files (like server.xml)
			├── logs/         # Log files
			├── webapps/      # Where apps are deployed
			├── lib/          # Libraries used by Tomcat

	STEPS--	1.Install java 
			 #yum install java -y
		2.Tomcat download for that go to the tomcat apache website there select the version and copy-paste it in server by adding wget infront of link
			#wget https://downloads.apache.org/tomcat/tomcat-10/v10.1.41/bin/apache-tomcat-10.1.41.tar.gz.asc
		3.Extact the tar file to /opt folder and check the folder by going into /opt folder use--cd command 
			#tar xvzf apache-tomcat-9.0.87.tar.gz. -c /opt
			#cd /opt #ls
		4.Create a user and change the owner_name and group_name to the apache-tomcat-9.0.87 folder and check
			#useradd tomcat #passwd tomcat 
			#chmod -R tomcat:tomcat apache-tomcat-9.0.87 
			#ls -to check the changes 
		5.switch to tomcat user 
			#su - tomcat
		6.To set user_name and paasword to login when we access website for that change to  apache-tomcat-9.0.87  and follow steps
			#cd  apache-tomcat-9.0.87 
			#cd conf #ls #vim tomcat.users.xml 
		7.make changes in TOMCAT.USERS.XML  file and make remaining part as comment with  <!-- <valve ............    .............0:0:1 /> -->
			<tomcat-users>
			<roles relename="manager-gui"/>
			<user username="tomcat" password="tomcat" roles="manager-gui"/>
			</tomcat-users>
		8.After that we have to stop and  start for update the changes for that we have to come back to apache-tomcat-9.0.87 and  move to BIN_FOLDER 
			#cd .. #cd bin #ls #sh startup.sh (then it indicate that tomcat started)
		9.change to apache-tomcat-9.0.87 folder and then flow the path and do changes in CONTEXT.XML to access in web
			#cd .. #cd webapps #cd manager #cd META-INF #vim context.xml
		10.In  CONTEXT.XML make all the lines as comments excpet last lines and startup.sh one more time to reflect the changes
				<context.............>
					<cookiepro.............>
						<!--value/-->(MAKING THIS LINE AS COMMENT)
					<MANAGER />
				</context>
			#sh startup.sh
		11.Now finally check at web browser for that copy ip and add port :8080 like 192.234.45.0:8080 and then click on manager
		   and give password adnd username whihc are we set in the tomcat.users.xml 


KUBERNETE -->  Automation the deploment and scaling and managing containers as well 
	       
		setup kubectl 			--Go to website and search for kubectl & copy the link and paste in linux to download 
		setup minikube			--Go to the website and search for minikube & copy the URL and paste in linux to download 
		To start the minikube 		-- minikube start 
		
	CLUSTER CMDS 
			cluster info		-- kubectl cluster -info
			cluster ip 		-- kubectl get service
			cluster deployment	--kubectl get deployment or kkubectl get deploy
	NODE CMDS
			check nodes		--kubectl get nodes
	PODS CMDS 
			create pods 		--kubectl run pod1 --image html :latest	
			login into pods 	--kubectl exec pod1 --it pod pod1 /bin/bash
			pod ip 			--kubectl get pod -o wide 
			check pods 		--kubectl get po or pods
			All pods info 		--kubectl get po -A
			delete pod 		--kubectl delete pod podname 	
	CONTAINER INFO
			check pods & conatiners --kubectl describe pod podname
			
	REPLICA SET
			check replica set	--kubectl get rs
	YAML SCRIPT 
    			IF ITS YOUR 1ST TIIME TO CREATE YMAL FILE USE THIS BELOW CMD
				kubectl create -f jp-pod

			AFTER CERATION OF YAML SCRIPT WE USE THIS CMD To APPLY THE SCRIT IN YOUR LINUC MACHINE
				kubectl apply -f jp-pod
